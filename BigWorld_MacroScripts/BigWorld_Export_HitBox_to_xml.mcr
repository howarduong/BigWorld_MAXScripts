macroScript Export_HitBox
	category:"BigWorld"
	toolTip:"Export HitBox to XML"
	Icon:#("bigworld_icons", 11)

-- Description
-- Creates a creature_collider.xml file from hitbox data generated by Attach Hitbox script

-- Format of typical creature_collider xml

-- <creature_skeleton.xml>
--         <SkeletonCollider>
--                 <BoxAttachment>
--                         <name>  biped Head      </name>
--                         <minBounds>     -0.100000 -0.100000 -0.100000  </minBounds>
--                         <maxBounds>     0.100000 0.100000 0.100000     </maxBounds>
--                 </BoxAttachment>
--                 <BoxAttachment>
--                         <name>  biped Pelvis    </name>
--                         <minBounds>     -0.200000 -0.200000 -0.200000  </minBounds>
--                         <maxBounds>     0.200000 0.200000 0.200000     </maxBounds>
--                 </BoxAttachment>
--         </SkeletonCollider>
-- </creature_skeleton.xml>

(	
	include "BigWorld_Common.ms"
	
	dotnet.loadAssembly "system.xml.dll"
	xml=dotNetObject "system.xml.xmlDocument"
	
	boxSuffix = "_bwhitbox"
	foundHitBox = false
	failing = false
	newXML = ""
	
	-- See if there's hitboxes 
	for obj in objects do
	(
		if matchPattern obj.name pattern:"*_bwhitbox" do
		(
			foundHitBox = true
			exit -- exit for loop, found a hitbox
		)
	)
	
	-- Get the hitbox file name from user
	if foundhitbox == true then -- Can't make a skeletoncollider without hitboxes
	(
		-- prompt for save file location 
		global f = getSaveFileName caption:"Export skeleton collider location" types:"XML(*.xml)"
		if f != undefined then
		(			
			if matchPattern f pattern:"*.xml" then -- the save dialog sometimes returns non .xml suffixed paths/file
			(
				-- print ("Debug: has .xml at end " + f as string)
			)
			else
			(
				tempName = f
				f = tempName + ".xml"
			)			
		)
		else
		(
			messagebox "export cancelled"
			failing = true
		)
	)
	else
	(
		message = "No objects with suffix \"" + boxSuffix as string + "\" found in scene./nPlease use the Attach Hitbox macroscript to generate hitboxes, or add them manually"
		messagebox message
		failing = true
	)
	
	-- Writing the XML
	if failing == false do 
	(
		-- Write Parent Tag
		pTag = filenameFromPath f
		root = xml.CreateElement pTag
		xml.AppendChild root
		
		-- Write SkeletonCollider tag
		sTag = xml.CreateElement "SkeletonCollider"
		root.AppendChild sTag
		
		for obj in objects do
		(
			if matchPattern obj.name pattern:"*_bwhitbox" and obj.parent != undefined then -- Dont want hitboxes that are not attached to nodes
			(
				-- Writing the Boxattachment tag
				bTag = xml.CreateElement "BoxAttachment"
				sTag.AppendChild bTag
				
				-- Writing the name tag and data
				nTag = xml.CreateElement "name"
				bTag.AppendChild nTag
				
				nameData = obj.parent.name as string
				nTag.InnerText = nameData
				
				-- writing minbounds
				minMax = nodeGetBoundingBox obj obj.parent.transform -- this an alternative way to find a minmax bounding box
				
				minData = convertToMeters minMax[1]
				
				minData = convertCoordinateToBW minData -- Because 3dsMax is X right, Z up, Y depth, and BigWorld is X right, Y up, Z depth, we need to swap around the Y and Z values.
				
				minDataDec6 = formattedPrint minData format:".6f"
				
				stripMinDataDec6 = cleanUpForPrinting minDataDec6 -- decFormat is of format [x,y,z] need to remove the characters ,[]
				
				mnTag = xml.CreateElement "minBounds"
				bTag.AppendChild mnTag
				mnTag.InnerText = stripMinDataDec6
				
				maxData = convertToMeters minMax[2]
				
				maxData = convertCoordinateToBW maxData
				
				maxDataDec6 = formattedPrint maxData format:".6f"
				
				stripMaxDataDec6 = cleanUpForPrinting maxDataDec6
				
				mxTag = xml.CreateElement "maxBounds"
				bTag.AppendChild mxTag
				mxTag.InnerText = stripMaxDataDec6
			)
		)
		
		xml.save f
		
		messagebox ("Skeleton Collider written to " + f as string)
	)
)