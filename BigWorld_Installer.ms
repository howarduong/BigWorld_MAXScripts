	
(
	-- BigWorld MaxScripts Installer
	-- 
	-- Author: Adam Maxwell
	-- Website: http://www.bigworldtech.com
	
	----------
	-- Var --
	----------
	installSectionAr = #("macroScriptsSec", "userScriptsSec", "userScriptsStartupSec", "userIconsSec", "matLibrarySec", "helperMapsSec", "importFilesSec", "helpFilesSec")
	
	-- For editing XML if installing in 3dsMax => 2013 due to .cui to .cuix format change. Could put this in if maxVersion
	dotnet.loadAssembly "system.xml.dll"
	
	-- Set in add_Toolbar_Ui
	current_CUIfile = ""
	incrementCuiDataCountStr = ""
	
	-- location of plugin.ini or Plugin.UserSettings.ini depending on max version number
	pluginIniLoc	= ""
		
	final_url = ""
	failing = false
	
	-- Set in getVarsFromTable
	_filesSource = ""
	_fileDest = ""
	fileDestSucceed = ""
	fileDestFail = ""
	deleteMessage = ""
	copyMessage = ""
	failedMessage = ""
	
	projectFolder = pathConfig.getCurrentProjectFolder() 
	maxRootTemp = ((getDir #maxRoot) + "temp\\")
	iconPath = ((getDir #maxRoot) + "ui\Icons\\")
	
	bwFolderLocation = ""
	bwShaderLocation = ""
	bwHelperMaps = ""
	bwImports = ""
	bwMaterialLibraries = ""
	
	--------------------------
	-- Try close rollouts --
	--------------------------	
	try
	(
		DestroyDialog rl_close;
	) catch();
	try 
	(
		DestroyDialog rl_install;
	) catch();
	try
	(
		DestroyDialog bwInstallLoc;
	) catch();
		
	---------------
	-- Rollouts --
	---------------	
	rollout rl_close "Installation complete" width:280 height:346
	(
		button btn_close "Close" pos:[179,310] width:100 height:32
		bitmap bmp1 "Bitmap" pos:[0,0] width:280 height:310 fileName:"toolsetup.bmp"
		label lbl2 "BigWorld MAXScripts installed successfully. Restart 3dsMax!" pos:[3,312] width:176 height:30
		on btn_close pressed do
		(
			try
			(
				DestroyDialog rl_close;
			) catch();
			
			if queryBox "Installation requires Restart of 3dsMax.\n Would you like to Close 3dsMax?" title:"Close 3dsMax" beep:false == true do
			(
				quitMAX()
			)
		)
	)
	
	-----------------
	-- functions --
	-----------------
	------------------------------------------------------------------------------------------------------------------------
	-- Finds the latests version of the files stored in the system temp dir by scaning all /mzptmp directories.	
	------------------------------------------------------------------------------------------------------------------------
	
	function setup_find_latest_MZP_url =
	(
		local url = sysInfo.tempdir as string; -- system temp
		local folders = getDirectories (url+"mzptmp*"); -- array of system temp MZP folders
		
		local _mathchUrls = #(); --store possible matches and have them sort by date later
		local _matchDates = #();
		for f in folders do -- for each folder mzptmp 
		(
			local  has_folder = getDirectories (f+"BigWorld_MAXScripts"); 
			local  has_mzp = getFiles (f+"mzp.run");
			
			if (has_folder.count == 1 and has_mzp.count == 1) then 
			(
				local _date = getFileCreateDate has_mzp[1];
				
				append _matchDates _date;
				append _mathchUrls f;
			
			)
		)
		
		if (_mathchUrls.count > 0) then -- Sort urls by date if some are found and return latest
		(
			local _new = amax _matchDates; --the latest date item
			local _indx = findItem _matchDates _new;
			local final_url = _mathchUrls[_indx];
			
			return final_url;
		)
		else
		(
			print "No tmpmzp folders found"
			return "";
		)
	)
	
	--------------------------------
	-- Delete temp mzp folder --  -- currently only deletes files and not folder.
	--------------------------------
	function remove_tmpmzp = 
	(
		--delete temporary MZP files generated by 3dsmax
		print "Deleting tmpmzp folder in user temp directory"
		
		local final_url = setup_find_latest_MZP_url();
		
		if (final_url != "") then
		(
			--generate a list of files to delete
			local del_folders =#();
			local del_files =#();
			
			local folders = getDirectories (final_url+"*");--temporay MZP folders
			append folders final_url -- This should add the root dir so files in root also get counted 
			
			for f in folders do
			(
				append del_folders f;  -- Add all the folders to the array
				
				local files = getFiles (f+"*"); -- Get the files from folder f
				for fl in files do
				(
					append del_files fl; -- Add all the files to the array
				)
				local files = getDirectories (f+"*");--delete files inside this folder before we can delete the folder. Just in Case do it twice
				for fldr in files do
				(
					local files2 = getFiles (fldr+"*");--delete files inside this folder before we can delete the folder
					for fl in files2 do
					(
						append del_files fl;
					)
				)
			)
						
			for s in del_files do
			(
				local _done = deleteFile s;
			)
			for s in del_folders do
			(
				local str = "rmdir \""+s+"\"";
				local _done;
				hiddendoscommand str startpath:"$max" exitCode:&_done
			)
		)
	)
	
	--------------------
	-- Data tables --
	--------------------	

	function get_vars_from_table installSection =
	(		
		case installSection of 
		(
			"macroScriptsSec":	-- Macroscripts --
			(
				_filesSource = getFiles (final_url + "\\BigWorld_MacroScripts\\*")
				_fileDest = pathConfig.getDir #userMacros
				fileDestSucceed = "User Macros folder found"
 				fileDestFail = "Could not find User Macros folder";
				deleteMessage = "Deleting old BigWorld MacroScripts"
				copyMessage = "Copying BigWorld MacroScript files"
				failedMessage = "Failed to copy BigWorld MacroScript files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"userScriptsSec":	-- UserScripts --
			(
				_filesSource = getFiles (final_url + "\\BigWorld_MAXScripts\\*"); 
				_fileDest = pathConfig.getDir #userScripts;
				fileDestSucceed = "User Scripts folder found"
 				fileDestFail = "Could not find User Scripts folder";
				deleteMessage = "Deleting old BigWorld UserScripts" 
				copyMessage = "Copying BigWorld UserScript files";
				failedMessage = "Failed to copy BigWorld UserScript files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"userScriptsStartupSec":	-- Startup UserScripts --
			(
				_filesSource = getFiles (final_url + "\\BigWorld_StartupScripts\\*"); 
				_fileDest = pathConfig.getDir #userStartupScripts;
				fileDestSucceed = "Startup Scripts folder found"
 				fileDestFail = "Could not find Startup Scripts folder";
				deleteMessage = "Deleting old BigWorld Startup Scripts" 
				copyMessage = "Copying BigWorld Startup Script files";
				failedMessage = "Failed to copy BigWorld Startup Script files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"userIconsSec": --Usericons -- 
			(
				_filesSource = getFiles (final_url + "Icons\\*");
				_fileDest = pathConfig.getDir #userIcons; 
				fileDestSucceed = "Usericons folder found"
 				fileDestFail =  "Could not find Usericons folder";
				deleteMessage = "Deleting old BigWorld UserIcons"
				copyMessage = "Copying BigWorld Icon files";
				failedMessage = "Failed to copy BigWorld UserIcon files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"matLibrarySec": -- Material library --
 			(
				_filesSource = getFiles (final_url + "materiallibraries\\*");
				_fileDest = bwFolderLocation + "\\bin\\tools\maxscripts\\src\materiallibraries"
 				fileDestSucceed = "materaillibraries\" folder created in game/bin/tools"
 				fileDestFail = "Could not create game/bin/tools/maxscripts/src/materiallibraries folder. \nSee manual installation instructions in Content Creation Manual.";
 				deleteMessage = "Deleting old BigWorld material library"
 				copyMessage = "Copying BigWorld Material libraries";
 				failedMessage = "Failed to copy BigWorld material libraries.\nSee manual installation instructions in Content Creation Manual.";
			)
			
			"helperMapsSec":	-- Helper maps --
			(
				_filesSource = getFiles (final_url + "helper_maps\\*"); 
				_fileDest = bwFolderLocation + "\\bin\\tools\maxscripts\\src\helper_maps"
				fileDestSucceed = "bwHelperMaps folder created in bw tools"
				fileDestFail = "Could not create game/tools/maxscripts/src/bwHelperMaps folder. \nSee manual installation instructions in Content Creation Manual.";
				deleteMessage = "Deleting old BigWorld helper map files"
				copyMessage = "Copying BigWorld helper map files";
				failedMessage = "Failed to copy BigWorld Helper maps files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"importFilesSec": -- Import files --
			(
				_filesSource = getFiles (final_url + "import\\*"); 
				-- old location, was import folder project specific, artists changing project folers would loose the hp file location
				--_fileDest = (pathConfig.getCurrentProjectFolder() +"\\import");
				_fileDest = bwFolderLocation + "\\bin\\tools\maxscripts\\src\import"
				fileDestSucceed = "hard_point folder created in bw tools"
				fileDestFail = "Could not create game/bin/tools/maxscripts/src/import. \nSee manual installation instructions in Content Creation Manual.";
				deleteMessage = "Deleting old hard_point files";
				copyMessage = "Copying BigWorld import files";
				failedMessage = "Failed to copy Import files. \nSee manual installation instructions in Content Creation Manual.";
			)
			
			"helpFilesSec": -- Move the help files -- 
			(
				_filesSource = getFiles (final_url + "help\\*");
				_fileDest = (getDir #maxData + "help")
				fileDestSucceed = "Creating help directory in User MaxData"
				fileDestFail = "Could not create help directory in AppData MaxData"
				deleteMessage = "Deleting old BigWorld help files"
				copyMessage = "Copying BigWorld help files";
				failedMessage = "Failed to copy BigWorld help files. \nSee manual installation instructions in Content Creation Manual.";
			)
		)
	)	
	
	---------------------------------------
	-- Edit the UI, Add the toolbar -- 
	---------------------------------------
	function add_Toolbar_Ui = 
	(
		current_CUIfile = cui.getConfigFile() -- finds the UI file location
		if failing == false then
		(			
			if queryBox "Would you like to install the BigWorld Toolbar Automatically? \n Note: Installation will edit your UI by modifying your user config file. \n Alternatively, manual installation instructions can be found in the Content Creation Manual." title:"Install BigWorld Toolbar" beep:false == true do
			(
				if ((maxVersion())[1] <= 14000 ) then -- Testing for max version. Cui files are a different format from 2013 and onwards. This test is already done before the function is called.
				(
					print "3dsMax version 2012 or lower detected. Modifying .cui file."
					
					-- attempting to make a backup of the cui file just in case
					backupUIFile = (cui.getDir() + "DefaultUI_backup_" + localTime + ".cui")
					if copyFile current_CUIfile backupUIFile then
					(
						print ("A backup of the UI file was created. " + backupUIFile)
					)
					else
					(
						print "Failed to create a backup of the UI file"
					)
					
					CuiWindowCountStr = getINISetting current_CUIfile "CUIData" "WindowCount" -- get the number of [CUIWwindowsF00n entries, which is always a number 1 higher than existing F00n
					CuiWindowCountInt = CuiWindowCountStr as integer -- make it an Int
					
					-- This prevents multiple F00n=T:BigWorld entries if multiple installs are attempted
					-- search through [CUIWindows] for F00n=T:BigWorld
					foundBigWorldInstall = false
					local i = 0
					for i = 0 to CuiWindowCountInt do
					(
						-- itterate through each F00n entry looking for a BigWorld key
						iformated = (formattedprint i format:"03d")
						iconcatenated = "F" + (iformated as string)
						isBigWorldInstalled = GetINISetting current_CUIfile "CUIWindows" iconcatenated
						if isBigWorldInstalled == "T:BigWorld" do
						(
							foundBigWorldInstall = true
						)
					)
					
					if foundBigWorldInstall == false then -- Check for previous installation
					(	
						-- Set the [CUIData] "WindowCount = n+1" 	
						CuiWindowCountInt = CuiWindowCountStr as integer -- make it an Int
						incrementCuiWindowCountStr = (CuiWindowCountInt += 1) as string -- add 1 for later use in postSystemShutdown callback
						
						setINISetting current_CUIfile "CUIData" "WindowCount" incrementCuiWindowCountStr
						
						-- Set the [CUIWindows] "F00n = T:Bigworld"
						cuiWindowsAr = getINISetting current_CUIfile "CUIWindows" -- gives an array of all entries F000, F001 etc
						nextCuiWindowsInt = cuiWindowsAr.count -- how many in array,
						concatenate = (formattedprint nextCuiWindowsInt format:"03d") -- no need to add 1 because first entry is 000
						nextCuiWindowsString = "F" + (concatenate as string) -- now have F00n
						setINISetting current_CUIfile "CUIWindows" nextCuiWindowsString "T:BigWorld" -- add to ini, F00n
					)
					else
					(
						print "An existing installation was detected. The interface config file was not modified"
					)
					
					-- Adding the [BigWorld] toolbar info. Dont need to test for previous installs because this will either overwrite or add new settings, not duplicates
					setINISetting current_CUIfile "BigWorld" "Rank" "307"
					setINISetting current_CUIfile "BigWorld" "SubRank" "2"
					setINISetting current_CUIfile "BigWorld" "Hidden" "0"
					setINISetting current_CUIfile "BigWorld" "FRect" "310 314 611 375"
					setINISetting current_CUIfile "BigWorld" "DRect" "1235 93 1536 132"
					setINISetting current_CUIfile "BigWorld" "DRectPref" "2147483647 2147483647 -2147483648 -2147483648"
					setINISetting current_CUIfile "BigWorld" "DPanel" "1"
					setINISetting current_CUIfile "BigWorld" "Tabbed" "0"
					setINISetting current_CUIfile "BigWorld" "TabCt" "0"
					setINISetting current_CUIfile "BigWorld" "CurTab" "-1"
					setINISetting current_CUIfile "BigWorld" "CurPos" "1 1235 93 1536 132"
					setINISetting current_CUIfile "BigWorld" "CType" "1"
					setINISetting current_CUIfile "BigWorld" "ToolbarRows" "1"
					setINISetting current_CUIfile "BigWorld" "ToolbarType" "3"
					setINISetting current_CUIfile "BigWorld" "ItemCount" "17"
					setINISetting current_CUIfile "BigWorld" "Item0" "2|0|0|31|3|647394|Export_Visual`BigWorld|0|0|\"Export BigWorld Visual\"|\"Export_Visual\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item1" "2|0|0|31|3|647394|Export_Animation`BigWorld|0|0|\"Export BigWorld Animation\"|\"Export_Animation\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item2" "2|0|0|31|3|647394|Standard_Portal`BigWorld|0|0|\"Add Standard Portal\"|\"Standard_Portal\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item3" "2|0|0|31|3|647394|Exit_Portal`BigWorld|0|0|\"Add Exit Portal\"|\"Exit_Portal\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item4" "2|0|0|31|3|647394|Heaven_Portal`BigWorld|0|0|\"Add Heaven Portal\"|\"Heaven_Portal\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item5" "2|0|0|31|3|647394|Label_Portal`BigWorld|0|0|\"Label a Portal\"|\"Label_Portal\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item6" "2|0|0|31|3|647394|Make_Hull`BigWorld|0|0|\"Convert to Custom Hull\"|\"Make_Hull\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item7" "2|0|0|31|3|647394|Import_HardPoint`BigWorld|0|0|\"Import Hard Point\"|\"Import_HardPoint\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item8" "2|0|0|31|3|647394|Make_BSP`BigWorld|0|0|\"Convert to BSP\"|\"Make_BSP\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item9" "2|0|0|31|3|647394|Cue_Track`BigWorld|0|0|\"Add a Note Track\"|\"Cue_Track\"|-1|"		
					setINISetting current_CUIfile "BigWorld" "Item10" "2|0|0|31|3|647394|MungeNormals`BigWorld|0|0|\"Munge Normals\"|\"MungeNormals\"|-1|"		
					setINISetting current_CUIfile "BigWorld" "Item11" "2|0|0|31|3|647394|Attach_HitBox`BigWorld|0|0|\"Attach HitBox\"|\"Attach_HitBox\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item12" "2|0|0|31|3|647394|Export_HitBox`BigWorld|0|0|\"Export HitBox to XML\"|\"Export_HitBox\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item13" "2|0|0|31|3|647394|Object_Divider`BigWorld|0|0|\"Object Divider\"|\"Object_Divider\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item14" "2|0|0|31|3|647394|Prefab_Assembler`BigWorld|0|0|\"Prefab_Assembler\"|\"Prefab_Assembler\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item15" "2|0|0|31|3|647394|Edit_Paths`BigWorld|0|0|\"Edit Paths.xml\"|\"Edit_Paths\"|-1|"
					setINISetting current_CUIfile "BigWorld" "Item16" "2|0|0|31|3|647394|Verify_Paths`BigWorld|0|0|\"Verify Texture Paths\"|\"Verify_Paths\"|-1|"
				) -- end if =< 3dsMax 2012
				else -- 3dsMax => 2013
				(
					MessageBox "Failed to modify User Interface. Automatic toolbar installation is not supported in 3dsMax2013 and higher. \nToolbar will require manual setup." title:"BigWorld Toolbar not added"
				)
			)
		)
		else
		(
			print "Failed to modify User Interface"
		)
	)
		
	-----------------
	-- Move files --
	-----------------
	function setup_bwtools_install =
	(
		if ((maxVersion())[1] >= 12000 ) then -- Testing for max version. BigWorld MAXScripts only supported in 2010 sp1 (12000) and greater
		(	
			final_url = setup_find_latest_MZP_url(); -- go and find the most recent tempmzp folder --
			
			if (final_url != "") then -- Test for able to write to temp dir
			(
				local failing = false
				
				for currentSection in installSectionAr do 
				(
					if failing == true then
					(
						print ("Installation failed")
						exit -- exit for loop
					)
					
					get_vars_from_table currentSection -- Go and get the variables from the data table
					
					local accessFolder = makeDir _fileDest;
					
					if (accessFolder == true) then -- able to write to _fileDest
					(	
						print fileDestSucceed
						failing = false;
						
						for sf in _filesSource do 
						(
							local tf = _fileDest + "\\" + filenameFromPath sf; --target file
							
							-- test if file is read only
							fileIsReadOnly = False
							if doesfileexist tf do
							(
								if (getFileAttribute tf #readOnly == true) do
								(
									fileIsReadOnly = True
								)
							)
							
							if fileIsReadOnly == False do
							(
								local delFile = deleteFile tf; --try to delete the files if they already exist in destination
								local accessFile = copyFile sf tf;
								
								if (delFile == true) then
								(
									print deleteMessage
								)	
								
								if (accessFile == true) then 
								(
									print copyMessage
								)
								else
								(
									messagebox failedMessage
									failing = true;
								)
								
								if currentSection == "helpFilesSec" do -- add pointer to Additional Help file in .ini file
								(
									-- pluginIniLoc location already determined in bwInstallLoc
									if (failing == false) then 
									(
										if setINISetting pluginIniLoc "Help" "BigWorld MAXScripts" tf == true then
										(
											print "Succeeded in adding Additional Help file to Plugin.UserSettings.ini"
										)
									)
									else
									(
										messagebox "Failed to add link to BigWorld help in Additional Help menu"
									)
								)
							)
						)		
					)
					else
					(
						print fileDestFail
						failing = true
					)
				) -- end while 
			)
			else
			(
				print "Unable to write to system Temp directory"
			)
			
			---------------------------------------
			-- Edit the UI, Add the toolbar -- 
			---------------------------------------
			if (failing == false) then
			(
				if ((maxVersion())[1] >= 15000 ) then -- Testing for max version. Disable install toolbar if 2013 or higher
				(
					MessageBox "Failed to modify User Interface. Automatic toolbar installation is not supported in 3dsMax2013 and higher. \nToolbar will require manual setup." title:"BigWorld Toolbar not added"					
				)
				else
				(
					add_Toolbar_Ui()
				)
			)
			
			---------------------------------------
			-- RELOADING MAX TOOLBAR --
			---------------------------------------
			if (failing == false) then
			(	
				colorman.reInitIcons() --load the new icons if you added any
				cui.loadconfig current_CUIfile --load the new edited UI config file
					
				CreateDialog rl_close 280 342;
				
				try
				(--close if possible
					DestroyDialog rl_install; -- Close dialog
				)catch();
				
				remove_tmpmzp() -- delete tmpmzp from temp dir
			)
		)
		else
		(
			Messagebox "Detected a version of less than version 9.0./n BigWorld MaxScripts require 3dsMax version 9.0 or greater";
		)
	)
	
	---------------------------------------
	-- Add bitmap path to BW install --
	---------------------------------------
	-- Does not test for failing because these bitmap paths are still useful even if the Maxscripts are not installed
	rollout bwInstallLoc "BigWorld Folder Locator" width:280 height:100
	(
		bitmap bmp1 "Bitmap" pos:[0,0] width:280 height:32 fileName:"install.bmp"
		label label1 "Please locate the game folder"
		button btn_locate "Select \"game\" folder"
		
		local foundBigWorld = false
		local cancelled = false
		local installing = false
		

		on btn_locate pressed do
		(
			thisFile = getSourceFilename()
			relativeBWdir = getFilenamePath(getSourceFilename())
			
			while foundBigWorld == false and cancelled == false do
			(
				bwFolderLocation = getSavePath caption:"Please locate and select the \"game\" folder." initialDir: "C:\mf_\bigworld"
				
				if bwFolderLocation == undefined then -- Cancel button sets bwFolderLocation to undefined
				(
					cancelled = true -- stop while loop
				)
				else
				(
					-- Modify to match your game folder name for validation
					-- if matchPattern bwFolderLocation pattern:"*bigworld" then
					if true then
					(
						foundBigWorld = true
						
						bwShaderLocation = bwFolderLocation + "\\res\\bigworld\\shaders\\std_effects" -- \\ ON ALL \
						bwHelperMaps = bwFolderLocation + "\\bin\\tools\\maxscripts\\src\\helper_maps"
						bwMaterialLibraries = bwFolderLocation + "\\bin\\tools\\maxscripts\\src\\materiallibraries"
						
						mapPaths.add bwShaderLocation
						mapPaths.add bwHelperMaps
						mapPaths.add bwMaterialLibraries
						
						print "Added the following paths to External Paths"
						print bwShaderLocation
						print bwHelperMaps
						print bwMaterialLibraries
						
						installing = true -- Prevents mzptmp from being deleted from system temp on close rollout
						
						-- install System Paths to BW exporter
						local bwExportFolderVer = ""
						local foundMaxVer = true
						local maxVersionNumber
						
						maxVersionNumber = (maxVersion())[1]
						
						-- Convert maxVersion number to a meaningful number and pad it with zeros
						maxVersionNumberConverted = ((maxVersionNumber/1000) - 2)
						maxVersionNumberConverted = formattedPrint maxVersionNumberConverted format:"02d" as string
						
						bwExportFolderVer = ("\3dsmax20" + maxVersionNumberConverted)
						
						if is64bitApplication() then
						(
							bwExportFolderVer = bwExportFolderVer + "x64"
						)
						
						bwExporterLocation = bwFolderLocation + "\\bin\\tools\\exporter" + bwExportFolderVer
						
						if ((maxVersion())[1] < 12000 ) then -- before max 2010 should write to plugin.ini in User Appdata
						(
							print "Detected 3dsMax version less than 10"
							pluginIniLoc = getDir #maxData + "Plugin.ini"
						)
						else -- max 2010 or greater should write to plugin.UserSettings.ini in User Appdata
						(
							print "Detected 3dsMax version 2010 or greater"
							pluginIniLoc = getDir #maxData + "Plugin.UserSettings.ini"
						)
						
						if foundMaxVer == true then -- cannot test both if's at once otherwise setINI will write to ini
						(
							if setINISetting pluginIniLoc "Directories" "BigWorld" bwExporterLocation == true then
							(
									print "Succeeded in adding BigWorld eporters to System Paths in file Plugin.UserSettings.ini"
							)
							else
							(
								messagebox "Failed to add BigWorld exporters to System Paths in file Plugin.UserSettings"
							)
						)
						else
						(
							messagebox "Failed to add BigWorld exporters to System Paths in file Plugin.UserSettings"
						)
						
						DestroyDialog bwInstallLoc
						setup_bwtools_install();
					)
					else
					(
						messagebox "Please select the \"game\" folder"
					)
				)
			)
			if cancelled == true do
			(
				print ("User cancelled installation.")
				remove_tmpmzp()
				DestroyDialog bwInstallLoc
			)
		)
		
		on bwInstallLoc close do -- Deletes mzptmp folder in system temp if user closes rollout
		(	
			if installing == false do
			(
			print ("User cancelled installation.")
			remove_tmpmzp()
			)
		)
	)	
	
	rollout rl_install "BigWorld MAXScripts Setup" width:280 height:100
	(
		bitmap bmp1 "Bitmap" pos:[0,0] width:280 height:32 fileName:"install.bmp"
		button btn_install "Install" pos:[70,40] width:140 height:32
		label txt_stats "Click 'Install' to install BigWorld MAXScripts to your userscript folder.\nRequires: 3dsMax 2010 service pack 1 or greater" pos:[4,86] width:270 height:50
		
		local installing = false
		
		on btn_install pressed do
		(
			installing = true -- prevents mzptmp from being deleted from system temp on close rollout
			CreateDialog bwInstallLoc
			try
			(--close if possible
				DestroyDialog rl_install;
			)catch
			();
		)
		on rl_install close do -- Deletes mzptmp folder in system temp if user closes rollout
		(
			if installing == false do 
			(
				print ("User cancelled installation.")
				remove_tmpmzp()
			)
		)
	)	

	CreateDialog rl_install 280 156;
)
